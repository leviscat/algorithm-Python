
def insert(arr):
    for i in range(1,len(arr)):
        key = arr[i]
        j = i-1
        while j>=0 and key<arr[j]:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = key
    return arr
#上述代码是插入排序的代码，但是有一个错误，就是arr[i] = arr[j]这一行，应该是arr[j+1] = arr[j]
#在进行插入排序的时候，需要对参数类型进行判断吗?答案是不需要，因为python是动态类型语言，不需要对参数类型进行判断
#如果是字典类型，会不会报错？答案是不会，因为字典类型是可迭代的,但是字典类型是无序的，所以不适合插入排序
#如果arr的长度为1，会不会报错？答案是不会，因为range(1,1)是空的，所以不会进入for循环，直接返回arr
#如果用java的话，会进入for循环吗？答案是会，因为java的for循环是for(int i=1;i<arr.length;i++)，所以会进入for循环，但是不会进入while循环
#测试用例
arr = [4,5,3,2,1]
print(insert(arr)) #[1,2,3,4,5]
#为什么不用写main函数？因为python是动态类型语言，不需要写main函数
#如果要写main函数，什么情况下需要写？答案是在需要调用函数的时候，需要写main函数
if __name__ == '__main__':
    print(insert(arr)) #[1,2,3,4,5]
#分析时间复杂度
#最好情况下，时间复杂度是O(n),最坏情况下，时间复杂度是O(n^2),平均时间复杂度是O(n^2)
#插入排序算法的分析
#最好的情况下，时间复杂度是O(n),最坏的情况下，时间复杂度是O(n^2),平均时间复杂度是O(n^2)
#运行时间T(n) = a*n^2+b*n+c,其中a,b,c是常数
#空间复杂度是什么意思?答案是空间复杂度是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数
#这个算法的空间复杂度是怎么样的？答案是O(1),因为只需要一个额外的空间，就是key

